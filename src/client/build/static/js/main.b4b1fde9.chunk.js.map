{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","cardArray","robots","map","user","i","Card","key","SearchBox","searchChange","input","placeholder","onChange","value","Scroll","children","style","overflow","height","ErroBoundry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","erro","info","setState","Component","App","_Component","apply","arguments","inherits","createClass","onRequestRobots","filter","robot","toLocaleLowerCase","includes","filteredRobots","_this$props","searchField","onSearchChange","isPending","onRequestSpeechToText","speechInput","isSpeech","onSpeechOff","filterRobotsByName","width","onClick","components_SearchBox","components_Scroll","ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","error","requestSpeechToText","dispatch","event","type","payload","target","fetch","then","response","json","data","catch","url","process","REACT_APP_API","text","token","stream","recognizeMic","access_token","objectMode","extractResults","format","keepMicrophone","on","alternatives","transcript","document","querySelector","onclick","stop","bind","initialStateSearch","initialStateRobots","isPenging","initialStateSpeechSearch","logger","createLogger","robotReducer","combineReducers","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4b1fde9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst card = ({ name, email, id }) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt=\"Robots\" src={ `https://robohash.org/${id}?200x200` }/>\n            <h2>{ name }</h2>\n            <p>{ email }</p>\n        </div>\n    )\n}\n\nexport default card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n  const cardArray = robots.map((user, i) => {\n    return <Card id={user.id} name={user.name} email={user.email} key={i} />;\n  });\n  return <div>{cardArray}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange, input }) => {\n  return (\n    <div className=\"pa3 dib\">\n      <input\n        className=\"pa2 ba b--green br3 bg-lightest-blue\"\n        id=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n        value={input}\n        />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = ({ children }) => {\n    return (\n        <div style={{overflow: 'scroll', height:'600px'}}>\n            {children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErroBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(erro, info) {\n    this.setState({ hasError: true });\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErroBoundry;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport { connect } from \"react-redux\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\nimport ErroBoundry from \"../components/ErrorBoundary\";\nimport { setSearchField, requestRobots, requestSpeechToText, speechOff } from \"../actions\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n    speechInput: state.requestSpeechToText.speechInput,\n    isSpeech: state.requestSpeechToText.isSpeech\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n    onRequestSpeechToText: () => dispatch(requestSpeechToText()),\n    onSpeechOff: () => dispatch(speechOff())\n  };\n};\nexport class App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  filterRobotsByName(name){\n    const { robots } = this.props;\n    return robots.filter(robot => {\n      return robot.name\n        .toLocaleLowerCase()\n        .includes(name.toLocaleLowerCase());\n    });\n  }\n  render() {\n    const {\n      searchField,\n      onSearchChange,\n      isPending,\n      onRequestSpeechToText,\n      speechInput,\n      isSpeech,\n      onSpeechOff\n    } = this.props;\n    let filteredRobots;\n    if(speechInput){\n      filteredRobots = this.filterRobotsByName(speechInput);\n    }else{\n      filteredRobots = this.filterRobotsByName(searchField)\n    }\n    \n\n    return isPending ? (\n      <div className=\"tc\">Loading...</div>\n    ) : (\n      <div className=\"tc overflow-hidden\">\n        <h1 className=\"f1 light-blue\">RoboFriends</h1>\n        {\n          isSpeech ? (\n            <div className=\"tc\">\n            <h3 className=\"dib light-blue tl\" style={{width:\"350px\"}}><strong className=\"ph2\">Searching:</strong>{speechInput}</h3>\n            <button\n          id=\"stop\"\n          onClick={onSpeechOff}\n          className=\"bg-light-purple lightest-blue dim br-pill b--lightest-blue\"\n        >\n          X\n        </button>\n        </div>\n          ) :(\n            <div className=\"tc\">\n              <SearchBox searchChange={onSearchChange}/>\n        \n        <button\n          onClick={onRequestSpeechToText}\n          className=\"bg-light-purple lightest-blue dim br-pill b--lightest-blue\"\n        >\n          audio\n        </button>\n            </div>\n          )\n        }        \n        <Scroll>\n          <ErroBoundry>\n            <CardList robots={filteredRobots} />\n          </ErroBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_SPEECH_TO_TEXT_PENDING,\n  REQUEST_SPEECH_TO_TEXT_SUCCESS,\n  REQUEST_SPEECH_TO_TEXT_FAILED,\n  SPEECH_ON,\n  SPEECH_OFF\n} from \"./constants\";\nimport recognizeMic from \"watson-speech/speech-to-text/recognize-microphone\";\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestSpeechToText = () => dispatch => {\n  dispatch({ type: REQUEST_SPEECH_TO_TEXT_PENDING });\n  dispatch({ type: SPEECH_ON });\n  // if in development environment\n  let url;\n  if (process.env.REACT_APP_API) {\n    url = process.env.REACT_APP_API + \"/api/speech-to-text/token\";\n  } else {\n    url = \"https://robot-list-with-speech-search.herokuapp.com/api/speech-to-text/token\";\n  }\n  fetch(url)\n    .then(response => {\n      return response.text();\n    })\n    .then(token => {\n      var stream = recognizeMic({\n        access_token: token,\n        objectMode: true, // send objects instead of text\n        extractResults: true, // convert {results: [{alternatives:[...]}], result_index: 0} to {alternatives: [...], index: 0}\n        format: false, // optional - performs basic formatting on the results such as capitals an periods\n        url: \"https://gateway-lon.watsonplatform.net/speech-to-text/api\",\n        keepMicrophone: true\n      });\n      stream.on(\"data\", data => {\n        dispatch({\n          type: REQUEST_SPEECH_TO_TEXT_SUCCESS,\n          payload: data.alternatives[0].transcript\n        });\n      });\n      stream.on(\"error\", error => {\n        dispatch({ type: REQUEST_SPEECH_TO_TEXT_FAILED, payload: error });\n      });\n      document.querySelector(\"#stop\").onclick = stream.stop.bind(stream);\n    })\n    .catch(function(error) {\n      dispatch({ type: REQUEST_SPEECH_TO_TEXT_FAILED, payload: error });\n    });\n};\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n\nexport const speechOff = () => ({\n  type: SPEECH_OFF\n});\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_SPEECH_TO_TEXT_PENDING= \"REQUEST_SPEECH_TO_TEXT_PENDING\";\nexport const REQUEST_SPEECH_TO_TEXT_SUCCESS= \"REQUEST_SPEECH_TO_TEXT_SUCCESS\";\nexport const REQUEST_SPEECH_TO_TEXT_FAILED= \"REQUEST_SPEECH_TO_TEXT_FAILED\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED= \"REQUEST_ROBOTS_FAILED\";\n\nexport const SPEECH_ON = \"SPEECH_ON\";\nexport const SPEECH_OFF= \"SPEECH_OFF\";\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_SPEECH_TO_TEXT_PENDING,\n  REQUEST_SPEECH_TO_TEXT_SUCCESS,\n  REQUEST_SPEECH_TO_TEXT_FAILED,\n  SPEECH_ON,\n  SPEECH_OFF\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPenging: true,\n  robots: [],\n  error: \"\"\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\nconst initialStateSpeechSearch = {\n  isSpeech: false,\n  speechInput: \"\"\n};\n\nexport const requestSpeechToText = (\n  state = initialStateSpeechSearch,\n  action = {}\n) => {\n  switch (action.type) {\n    case REQUEST_SPEECH_TO_TEXT_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_SPEECH_TO_TEXT_SUCCESS:\n      return { ...state, speechInput: action.payload, isPending: false };\n    case REQUEST_SPEECH_TO_TEXT_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    case SPEECH_ON:\n      return { ...state, isSpeech: true };\n    case SPEECH_OFF:\n      return { ...state, isSpeech: false, speechInput: \"\" };\n    default:\n      return state;\n  }\n};\n\nconst initialStateSpeech = {\n  isSpeech: false,\n  speechInput: \"\"\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport App from \"./containers/App\";\n\n// import App from \"./App\";\nimport { searchRobots, requestRobots, requestSpeechToText } from \"./reducer\";\n\nconst logger = createLogger();\n\nconst robotReducer = combineReducers({ searchRobots, requestRobots, requestSpeechToText });\nconst store = createStore(\n  robotReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}